// Invariant region Moment


import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;

public class Region_Moment implements PlugInFilter {
	
	public int setup(String args, ImagePlus im) {
		return DOES_RGB;
	}
	
	public double moment(ImageProcessor I, int p, int q) {
		double Mpq = 0.0;
		for (int v = 0; v < I.getHeight(); v++) {
			for (int u = 0; u < I.getWidth(); u++) {
				if (I.getPixel(u, v) > 0) {
					Mpq+= Math.pow(u, p) * Math.pow(v, q);
				}
			}
		}
		return Mpq;
	}

	public double centralMoment(ImageProcessor I, int p, int q) {
		double m00 = moment(I, 0, 0);
		double xCtr = moment(I, 1, 0) / m00;
		double yCtr = moment(I, 0, 1) / m00;
		double cMpq = 0.0;

		for (int v = 0; v < I.getHeight(); v++) {
			for (int u = 0; u < I.getWidth(); u++) {
				if (I.getPixel(u, v) > 0) {
					cMpq+= Math.pow(u-xCtr, p) * Math.pow(v-yCtr, q);
				}
			}
		}
		return cMpq;
	}

	public double nCentralMoment(ImageProcessor I, int p, int q) {
		double m00 = moment(I, 0, 0);
		double norm = Math.pow(m00, 0.5 * (p + q + 2));
		return centralMoment(I, p, q) / norm;
	}

	public double invariantMoment(ImageProcessor I){
		double moment = 0.5*Math.atan((2*centralMoment(I,1,1))/(centralMoment(I,2,0)-centralMoment(I,0,2)));
		return moment;
	}

	public void run(ImageProcessor ip){
		invariantMoment(ip);
	}
}
